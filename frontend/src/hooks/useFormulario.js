import { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import Swal from "sweetalert2";

const useFormulario = (initialState, url, redirigir, isAuthForm = false) => {
  const [datos, setDatos] = useState(initialState);
  const [mensaje, setMensaje] = useState({ tipo: "", texto: "" });
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleChange = (e) => {
    setDatos({ ...datos, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMensaje({ tipo: "", texto: "" });

    // Validar que todos los campos estÃ©n llenos
    if (Object.values(datos).some((campo) => !campo)) {
      await Swal.fire({
        icon: "error",
        title: "Error",
        text: "Todos los campos son obligatorios.",
      });
      setLoading(false);
      return false;
    }

    try {
      const respuesta = await axios.post(url, datos, { withCredentials: true });

      // âœ… Si es un formulario de autenticaciÃ³n (Login o Registro)
      if (isAuthForm) {
        await Swal.fire({
          icon: "success",
          title: "Inicio de sesiÃ³n exitoso",
          text: "OperaciÃ³n exitosa, redirigiendo...",
          timer: 1500,
          timerProgressBar: true,
          showConfirmButton: false,
        });

        // Guardar el token en localStorage
        localStorage.setItem("token", respuesta.data.token);

        // Redirigir despuÃ©s de 2 segundos
        setTimeout(() => navigate(redirigir), 1500);
      } else {
        // âœ… Formulario de recuperaciÃ³n o restablecimiento de contraseÃ±a
        await Swal.fire({
          icon: "success",
          title: "OperaciÃ³n exitosa",
          text: respuesta.data.mensaje || "Proceso realizado correctamente.",
          confirmButtonColor: "#3085d6",
          timer: 1500,
          timerProgressBar: true,
          showConfirmButton: false,
        });

        // Redirigir despuÃ©s de 3 segundos si todo saliÃ³ bien
        setTimeout(() => navigate(redirigir), 1500);
      }

      return true; // âœ… Indica que la operaciÃ³n fue exitosa
    } catch (error) {
      // ğŸš¨ Si el backend no responde (Error 500)
      if (!error.response) {
        navigate("/error500");
        return false;
      }
      

      if (error.response.status === 400) {
        const mensajeError = error.response.data.mensaje || "Solicitud incorrecta.";
      
        // âœ… Si el error es por credenciales incorrectas en Login, mostrar alerta y NO redirigir
        if (mensajeError === "Correo o contraseÃ±a incorrectos.") {
          setMensaje({ tipo: "error", texto: mensajeError }); // âœ… Guardar mensaje en el estado
          return false; // ğŸš¨ Evita que el formulario actÃºe como si fue exitoso
        }
      
        // âœ… Si el error es en recuperaciÃ³n/restablecimiento de contraseÃ±a, mostrar alerta en vez de redirigir
        if (
          mensajeError.includes("Correo no registrado") ||
          mensajeError.includes("Token invÃ¡lido") ||
          mensajeError.includes("contraseÃ±a debe tener mÃ­nimo")
        ) {
          setMensaje({ tipo: "error", texto: mensajeError });
          return false;
        }
      
        // ğŸš¨ Otros errores 400 sÃ­ redirigen a la pÃ¡gina de error
        navigate("/error400");
        return false;
      }
      

      // ğŸš¨ Si el recurso no existe (Error 404)
      if (error.response.status === 404) {
        navigate("/error404");
        return false;
      }

      // ğŸš¨ Otros errores no manejados explÃ­citamente
      Swal.fire({
        icon: "error",
        title: "Error",
        text: error.response?.data?.mensaje || "Error en la solicitud.",
      });

      setMensaje({
        tipo: "error",
        texto: error.response?.data?.mensaje || "Error en la solicitud.",
      });

      return false;
    } finally {
      setLoading(false);
    }
  };

  return { datos, mensaje, handleChange, handleSubmit, loading };
};

export default useFormulario;
